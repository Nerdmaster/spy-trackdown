<?php

require_class("Travel");
require_class("Region");
require_class("MapZone");

/**
 * Static-only class for map data - where each zone goes and such
 */
class Map {
  // All map zones, keyed by internal id
  public static $zones;

  /**
   * Initializes all static map data - maybe this should be in the DB, but it's completely static
   * data and doesn't really warrant DB hits
   */
  public static function initialize() {
    // Reset zones array
    self::$zones = array();

    // Build each zone in North America
    self::build_zones(Region::NORTH_AMERICA, array(
      "New York",
      "Washington, D.C.",
      "Havana",
      "Panama City",
      "San Salvador",
      "Mexico City",
      "Los Angeles",
      "Seattle",
      "Chicago",
      "Toronto"
    ));

    // Set up internal links for North American cities
    self::create_link("nor1", "nor2", Travel::GREEN);
    self::create_link("nor1", "nor10", Travel::BLUE);
    self::create_link("nor2", "nor3", Travel::BLUE);
    self::create_link("nor2", "nor7", Travel::RED);
    self::create_link("nor3", "nor6", Travel::YELLOW);
    self::create_link("nor4", "nor5", Travel::GREEN);
    self::create_link("nor5", "nor6", Travel::RED);
    self::create_link("nor6", "nor7", Travel::BLUE);
    self::create_link("nor7", "nor8", Travel::GREEN);
    self::create_link("nor8", "nor9", Travel::BLUE);
    self::create_link("nor9", "nor10", Travel::RED);

    // Build each zone in South America
    self::build_zones(Region::SOUTH_AMERICA, array(
      "Rio de Janeiro",
      "Sao Paulo",
      "Buenos Aires",
      "Santiago",
      "Lima",
      "Quito",
      "Bogota",
      "Caracas",
      "La Paz"
    ));

    // Set up internal links for South American cities
    self::create_link("sou1", "sou2", Travel::GREEN);
    self::create_link("sou1", "sou8", Travel::BLUE);
    self::create_link("sou1", "sou9", Travel::RED);
    self::create_link("sou2", "sou3", Travel::RED);
    self::create_link("sou3", "sou4", Travel::GREEN);
    self::create_link("sou3", "sou5", Travel::BLUE);
    self::create_link("sou4", "sou5", Travel::YELLOW);
    self::create_link("sou5", "sou6", Travel::RED);
    self::create_link("sou5", "sou9", Travel::GREEN);
    self::create_link("sou6", "sou7", Travel::BLUE);
    self::create_link("sou7", "sou8", Travel::GREEN);


    // TODO: Other regions

    // Build region-to-region linking
    self::create_link("nor4",   "sou8", Travel::YELLOW);
    //self::create_link("nor7",   "aus1", Travel::YELLOW);
    //self::create_link("nor8",   "asi1", Travel::YELLOW);
    //self::create_link("nor10",  "eur8", Travel::YELLOW);
    //self::create_link("sou1",   "eur6", Travel::YELLOW);
    //self::create_link("sou3",   "afr5", Travel::YELLOW);
  }

  /**
   * Given a region name and array of city names, creates numbered zone list for the region
   */
  public static function build_zones($region, $city_names) {
    $num = 1;
    foreach ($city_names as $name) {
      $map_zone = new MapZone($region, $name, $num++);
      self::$zones[$map_zone->code()] = $map_zone;
    }
  }

  /**
   * Gets the zone by the given zone code.  A zone code is generated by a MapZone object.
   *
   * If there is no zone identified by the given code, throws an UnexpectedValueException.
   */
  public static function get_zone_by_code($code) {
    if (!array_key_exists($code, self::$zones)) {
      throw new UnexpectedValueException("Zone code, '$region_code_1', does not exist");
    }

    return self::$zones[$code];
  }

  /**
   * Links two zones by the given method of travel.  If either zone already has a link for that
   * method, an exception will be thrown.
   */
  public static function create_link($zone_code_1, $zone_code_2, $travel_code) {
    // Get zones - if the codes are invalid, this will puke
    $zone1 = self::get_zone_by_code($zone_code_1);
    $zone2 = self::get_zone_by_code($zone_code_2);

    // Set up link - if the form of travel already has a link for either zone, this will puke
    $zone1->set_link($travel_code, $zone2);
  }

  /**
   * Helpful debugger - returns a bunch of text about the map for verification
   */
  public static function to_string() {
    $result = "";
    foreach (self::$zones as $zone_code => $map_zone) {
      $result .= "$zone_code ({$map_zone->region()} {$map_zone->location_number()} - {$map_zone->city_name()}):\n";
      foreach(array(Travel::RED, Travel::BLUE, Travel::GREEN, Travel::YELLOW) as $travel) {
        $linked = $map_zone->link($travel);
        $code = $linked ? $linked->code() : "N/A";
        $result .= sprintf("  %-20s %5s\n", $travel, $code);
      }
    }

    return $result;
  }

  // Verification rules:
  // * Every space must have 2+ links
  // * Spaces with an external link must have at least one local link
  // * Every continental jump must be yellow
  // * Every continent must jump to at least two other continents
  // * No continent may jump to another continent twice
  public static function validate_map() {
  }
}
